#!/usr/bin/env python3
import argparse
import os
from pprint import pprint

from lib.ccache import CacheReader, CacheWriter

# Assuming it hasn't been overwritten system-wide
default_cache = os.environ.get("KRB5CCNAME",
                               "FILE:/tmp/krb5cc_%d" % os.getuid())

parser = argparse.ArgumentParser()
parser.add_argument("-c", "--cache", default=default_cache,
                    help="path to the credential cache")
parser.add_argument("-o", "--output",
                    help="output file")
parser.add_argument("-v", "--verbose", action="store_true",
                    help="dump the cache contents to stdout")
parser.add_argument("-p", "--principal", action="append", default=[],
                    help="principal to erase tickets for")
args = parser.parse_args()

exclude = {*args.principal}

if ":" in args.cache:
    cctype, ccname = args.cache.split(":", 1)
    if cctype != "FILE":
        raise RuntimeError("Only FILE: caches are supported")
else:
    cctype, ccname = "FILE", args.cache

with open(ccname, "rb") as fh:
    cache = CacheReader(fh).read_cache()

if args.verbose:
    pprint(cache)

creds = []
for cred in cache.credentials:
    name, realm = cred.server.unparse().rsplit("@", 1)
    if {f"{name}", f"{name}@{realm}"} & exclude:
        print(f"Skipping ticket for {name}@{realm}")
    else:
        print(f"Keeping ticket for {name}@{realm}")
        creds.append(cred)
cache.credentials = creds

with open(args.output or ccname, "wb") as fh:
    os.fchmod(fh.fileno(), 0o600)
    CacheWriter(fh).write_cache(cache)
